#!/bin/bash

# Payment Tester - Skrypt uruchamiajƒÖcy
# Automatycznie konfiguruje i uruchamia narzƒôdzie testowe

set -e

echo "üß™ Payment Tester - Uruchamianie..."
echo "=================================="

# Sprawd≈∫ czy Node.js jest zainstalowany
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js nie jest zainstalowany. Zainstaluj Node.js >= 16.0.0"
    exit 1
fi

# Sprawd≈∫ wersjƒô Node.js
NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 16 ]; then
    echo "‚ùå Wymagana wersja Node.js >= 16.0.0, obecna: $(node --version)"
    exit 1
fi

echo "‚úÖ Node.js $(node --version) - OK"

# Sprawd≈∫ czy npm jest zainstalowany
if ! command -v npm &> /dev/null; then
    echo "‚ùå npm nie jest zainstalowany"
    exit 1
fi

echo "‚úÖ npm $(npm --version) - OK"

# Przejd≈∫ do katalogu payment-tester
cd "$(dirname "$0")"
echo "üìÅ Katalog roboczy: $(pwd)"

# Sprawd≈∫ czy plik package.json istnieje
if [ ! -f "package.json" ]; then
    echo "‚ùå Nie znaleziono pliku package.json"
    exit 1
fi

# Sprawd≈∫ czy node_modules istnieje, je≈õli nie - zainstaluj zale≈ºno≈õci
if [ ! -d "node_modules" ]; then
    echo "üì¶ Instalowanie zale≈ºno≈õci..."
    npm install
    echo "‚úÖ Zale≈ºno≈õci zainstalowane"
else
    echo "‚úÖ Zale≈ºno≈õci ju≈º zainstalowane"
fi

# Sprawd≈∫ czy plik .env istnieje
if [ ! -f ".env" ]; then
    echo "‚öôÔ∏è  Tworzenie pliku .env z przyk≈Çadowej konfiguracji..."
    if [ -f ".env.example" ]; then
        cp .env.example .env
        echo "‚úÖ Plik .env utworzony z .env.example"
        echo "üí° Mo≈ºesz edytowaƒá plik .env aby dostosowaƒá konfiguracjƒô"
    else
        echo "‚ö†Ô∏è  Nie znaleziono pliku .env.example, tworzƒô podstawowy .env"
        cat > .env << EOF
SUPABASE_URL=https://kldekjrpottsqebueojg.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtsZGVranJwb3R0c3FlYnVlb2pnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIwNTc4NTcsImV4cCI6MjA2NzYzMzg1N30.aYCWfbhliWM3yQRyZUDL59IgMOWklwa0ZA4QOSdyLh0
TEST_PORT=3002
NODE_ENV=development
FRONTEND_URL=http://localhost:8080
EOF
        echo "‚úÖ Podstawowy plik .env utworzony"
    fi
else
    echo "‚úÖ Plik .env ju≈º istnieje"
fi

# Sprawd≈∫ czy porty sƒÖ wolne
check_port() {
    local port=$1
    if lsof -i :$port &> /dev/null; then
        echo "‚ö†Ô∏è  Port $port jest zajƒôty"
        return 1
    else
        echo "‚úÖ Port $port jest wolny"
        return 0
    fi
}

# Sprawd≈∫ port backendu (3002)
if ! check_port 3002; then
    echo "üí° Spr√≥buj zabiƒá proces na porcie 3002: lsof -ti:3002 | xargs kill -9"
fi

# Sprawd≈∫ port frontendu (8080)
if ! check_port 8080; then
    echo "üí° Spr√≥buj zabiƒá proces na porcie 8080: lsof -ti:8080 | xargs kill -9"
fi

echo ""
echo "üöÄ Uruchamianie Payment Tester..."
echo ""

# Funkcja do obs≈Çugi sygna≈Çu przerwania (Ctrl+C)
cleanup() {
    echo ""
    echo "üõë Zatrzymywanie serwer√≥w..."
    kill $BACKEND_PID 2>/dev/null || true
    kill $FRONTEND_PID 2>/dev/null || true
    wait
    echo "‚úÖ Serwery zatrzymane"
    exit 0
}

trap cleanup SIGINT SIGTERM

# Uruchom backend w tle
echo "üîß Uruchamianie backendu testowego (port 3002)..."
node test-backend.js &
BACKEND_PID=$!

# Poczekaj chwilƒô na uruchomienie backendu
sleep 3

# Sprawd≈∫ czy backend dzia≈Ça
if ! curl -s http://localhost:3002/api/test/health &> /dev/null; then
    echo "‚ùå Backend nie odpowiada na porcie 3002"
    kill $BACKEND_PID 2>/dev/null || true
    exit 1
fi

echo "‚úÖ Backend uruchomiony (PID: $BACKEND_PID)"

# Uruchom frontend w tle
echo "üåê Uruchamianie frontendu (port 8080)..."

# Sprawd≈∫ czy Python3 jest dostƒôpny
if command -v python3 &> /dev/null; then
    python3 -m http.server 8080 --directory . &> /dev/null &
    FRONTEND_PID=$!
    echo "‚úÖ Frontend uruchomiony z Python3 (PID: $FRONTEND_PID)"
elif command -v python &> /dev/null; then
    python -m http.server 8080 --directory . &> /dev/null &
    FRONTEND_PID=$!
    echo "‚úÖ Frontend uruchomiony z Python (PID: $FRONTEND_PID)"
elif command -v npx &> /dev/null; then
    npx http-server -p 8080 --silent &> /dev/null &
    FRONTEND_PID=$!
    echo "‚úÖ Frontend uruchomiony z http-server (PID: $FRONTEND_PID)"
else
    echo "‚ö†Ô∏è  Nie mo≈ºna uruchomiƒá serwera HTTP. Zainstaluj Python3 lub http-server"
    echo "   npm install -g http-server"
    kill $BACKEND_PID 2>/dev/null || true
    exit 1
fi

# Poczekaj chwilƒô na uruchomienie frontendu
sleep 2

echo ""
echo "üéâ Payment Tester uruchomiony pomy≈õlnie!"
echo "=================================="
echo ""
echo "üåê Frontend:  http://localhost:8080"
echo "üîß Backend:   http://localhost:3002"
echo "üìä Health:    http://localhost:3002/api/test/health"
echo ""
echo "üí° Naci≈õnij Ctrl+C aby zatrzymaƒá serwery"
echo ""

# Opcjonalnie otw√≥rz przeglƒÖdarkƒô
if command -v xdg-open &> /dev/null; then
    echo "üîó Otwieranie przeglƒÖdarki..."
    xdg-open http://localhost:8080 &> /dev/null &
elif command -v open &> /dev/null; then
    echo "üîó Otwieranie przeglƒÖdarki..."
    open http://localhost:8080 &> /dev/null &
fi

# Czekaj na sygna≈Ç przerwania
wait $BACKEND_PID $FRONTEND_PID